AWSTemplateFormatVersion: '2010-09-09'
Description: Cost-Optimized CI/CD Pipeline for EKS with Full Rollback Capability
Resources:
  # ========================
  # 1. VPC Networking (Minimal)
  # ========================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # ========================
  # 2. EKS Cluster (Minimal)
  # ========================
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub 'ci-cd-eks-${AWS::StackName}'
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: [!Ref PublicSubnet]
        SecurityGroupIds: [!GetAtt EKSSecurityGroup.GroupId]
      Version: '1.27'

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: {Service: eks.amazonaws.com}
            Action: sts:AssumeRole
      ManagedPolicyArns: [arn:aws:iam::aws:policy/AmazonEKSClusterPolicy]

  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS Cluster Communication
      VpcId: !Ref VPC

  # ========================
  # 3. Fargate Profile (No EC2 nodes)
  # ========================
  FargateProfile:
    Type: AWS::EKS::FargateProfile
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref EKSCluster
      FargateProfileName: !Sub 'fp-${AWS::StackName}'
      PodExecutionRoleArn: !GetAtt EKSFargateRole.Arn
      Subnets: [!Ref PublicSubnet]
      Selectors:
        - Namespace: default

  EKSFargateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: {Service: eks-fargate-pods.amazonaws.com}
            Action: sts:AssumeRole
      ManagedPolicyArns: [arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy]

  # ========================
  # 4. CI/CD Pipeline
  # ========================
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub 'eks-pipeline-${AWS::StackName}'
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub-Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: !Select [3, !Split ['/', !Ref GitHubRepo]]
                Repo: !Select [4, !Split ['/', !Ref GitHubRepo]]
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts: [{Name: SourceOutput}]

        - Name: Build
          Actions:
            - Name: Docker-Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts: [{Name: SourceOutput}]
              OutputArtifacts: [{Name: BuildOutput}]

        - Name: Deploy
          Actions:
            - Name: EKS-Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CodeDeployToECS
              Configuration:
                ClusterName: !Ref EKSCluster
                ServiceName: 'app-service'
              InputArtifacts: [{Name: BuildOutput}]

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub 'eks-builder-${AWS::StackName}'
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts: {Type: CODEPIPELINE}
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        PrivilegedMode: true
      Source: {Type: CODEPIPELINE}
      TimeoutInMinutes: 10

  # ========================
  # 5. IAM Roles
  # ========================
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: {Service: codepipeline.amazonaws.com}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelinePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - eks:DescribeCluster
                Resource: '*'

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: {Service: codebuild.amazonaws.com}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BuildPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: '*'

  # ========================
  # 6. ECR Repository
  # ========================
  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'eks-app-${AWS::StackName}'
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only 5 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": { "type": "expire" }
              }
            ]
          }

Outputs:
  PipelineURL:
    Description: CodePipeline Console URL
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${CodePipeline}/view'
  EKSConfigCommand:
    Description: Command to configure kubectl
    Value: !Sub 'aws eks update-kubeconfig --name ${EKSCluster} --region ${AWS::Region}'
  ECRRepositoryURI:
    Description: ECR Repository URI
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepo}'
